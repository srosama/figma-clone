"use client";

import fabric from "fabric";
import { useEffect, useRef, useState } from "react";
import { useMutation, useRedo, useStorage, useUndo } from "@liveblocks/react/suspense";

import {
  handleCanvaseMouseMove,
  handleCanvasMouseDown,
  handleCanvasMouseUp,
  handleCanvasObjectModified,
  handleCanvasObjectMoving,
  handleCanvasObjectScaling,
  handleCanvasSelectionCreated,
  handleCanvasZoom,
  handlePathCreated,
  handleResize,
  initializeFabric,
  renderCanvas,
} from "../../lib/canvas";

import { handleImageUpload } from "../../lib/shapes";
import { handleDelete, handleKeyDown } from "../../lib/key-events";
import { defaultNavElement } from "../../utils";

import Navbar from "../../components/layout/editor/Navbar";
import Live from "../../components/Live";
import LeftSidebar from "../../components/layout/editor/LeftSidebar";
import RightSidebar from "../../components/layout/editor/RightSidebar";

import { ActiveElement, Attributes } from "../../types/type";

const Editor = () => {
  const undo = useUndo();
  const redo = useRedo();
  const canvasObjects = useStorage((root) => root.canvasObjects);

  const canvasRef = useRef<HTMLCanvasElement>(null);
  const fabricRef = useRef<fabric.Canvas | null>(null);
  const isDrawing = useRef(false);
  const shapeRef = useRef<fabric.Object | null>(null);
  const selectedShapeRef = useRef<string | null>(null);
  const activeObjectRef = useRef<fabric.Object | null>(null);
  const isEditingRef = useRef(false);
  const imageInputRef = useRef<HTMLInputElement>(null);

  const [activeElement, setActiveElement] = useState<ActiveElement>({
    name: "",
    value: "",
    icon: "",
  });

  const [elementAttributes, setElementAttributes] = useState<Attributes>({
    width: "",
    height: "",
    fontSize: "",
    fontFamily: "",
    fontWeight: "",
    fill: "#aabbcc",
    stroke: "#aabbcc",
  });

  const deleteShapeFromStorage = useMutation(({ storage }, shapeId) => {
    const canvasObjects = storage.get("canvasObjects");
    canvasObjects.delete(shapeId);
  }, []);

  const deleteAllShapes = useMutation(({ storage }) => {
    const canvasObjects = storage.get("canvasObjects");
    if (!canvasObjects || canvasObjects.size === 0) return true;
    for (const [key] of canvasObjects.entries()) {
      canvasObjects.delete(key);
    }
    return canvasObjects.size === 0;
  }, []);

  const syncShapeInStorage = useMutation(({ storage }, object) => {
    if (!object) return;
    const { objectId } = object;
    const shapeData = object.toJSON();
    shapeData.objectId = objectId;

    const canvasObjects = storage.get("canvasObjects");
    canvasObjects.set(objectId, shapeData);
  }, []);


  useEffect(() => {
    const canvas = initializeFabric({
      canvasRef,
      fabricRef,
    });

    const handleMouseDown = (options) => {
      handleCanvasMouseDown({
        options,
        canvas,
        selectedShapeRef,
        isDrawing,
        shapeRef,
      });
    };

    const handleMouseMove = (options) => {
      handleCanvaseMouseMove({
        options,
        canvas,
        isDrawing,
        selectedShapeRef,
        shapeRef,
        syncShapeInStorage,
      });
    };

    const handleMouseUp = () => {
      handleCanvasMouseUp({
        canvas,
        isDrawing,
        shapeRef,
        activeObjectRef,
        selectedShapeRef,
        syncShapeInStorage,
        setActiveElement,
      });
    };

    const handlePathCreatedEvent = (options) => {
      handlePathCreated({
        options,
        syncShapeInStorage,
      });
    };

    const handleObjectModifiedEvent = (options) => {
      handleCanvasObjectModified({
        options,
        syncShapeInStorage,
      });
    };

    const handleObjectMovingEvent = (options) => {
      handleCanvasObjectMoving({
        options,
      });
    };

    const handleSelectionCreatedEvent = (options) => {
      handleCanvasSelectionCreated({
        options,
        isEditingRef,
        setElementAttributes,
      });
    };

    const handleObjectScalingEvent = (options) => {
      handleCanvasObjectScaling({
        options,
        setElementAttributes,
      });
    };

    const handleMouseWheel = (options: any) => {
      handleCanvasZoom({
        options,
        canvas,
      });
    };

    canvas.on("mouse:down", handleMouseDown);
    canvas.on("mouse:move", handleMouseMove);
    canvas.on("mouse:up", handleMouseUp);
    canvas.on("path:created", handlePathCreatedEvent);
    canvas.on("object:modified", handleObjectModifiedEvent);
    canvas.on("object:moving", handleObjectMovingEvent);
    canvas.on("selection:created", handleSelectionCreatedEvent);
    canvas.on("object:scaling", handleObjectScalingEvent);
    canvas.on("mouse:wheel", handleMouseWheel);

    const handleResizeEvent = () => {
      handleResize({ canvas: fabricRef.current });
    };

    const handleKeyDownEvent = (e) => {
      handleKeyDown({
        e,
        canvas: fabricRef.current,
        undo,
        redo,
        syncShapeInStorage,
        deleteShapeFromStorage,
      });
    };

    window.addEventListener("resize", handleResizeEvent);
    window.addEventListener("keydown", handleKeyDownEvent);

    return () => {
      canvas.dispose();
      window.removeEventListener("resize", handleResizeEvent);
      window.removeEventListener("keydown", handleKeyDownEvent);
    };
  }, [canvasRef]);

  useEffect(() => {
    renderCanvas({
      fabricRef,
      canvasObjects,
      activeObjectRef,
    });
  }, [canvasObjects]);

  return (
    <main className="h-screen overflow-hidden">
      <Navbar
        imageInputRef={imageInputRef}
        activeElement={activeElement}
        handleImageUpload={(e) => {
          e.stopPropagation();
          handleImageUpload({
            file: e.target.files[0],
            canvas: fabricRef as any,
            shapeRef,
            syncShapeInStorage,
          });
        }}
        handleActiveElement={handleActiveElement}
      />

      <section className="flex h-full flex-row">
        {/* <LeftSidebar allShapes={Array.from(canvasObjects)} /> */}
        <Live canvasRef={canvasRef} undo={undo} redo={redo} />
        <RightSidebar
          elementAttributes={elementAttributes}
          setElementAttributes={setElementAttributes}
          fabricRef={fabricRef}
          isEditingRef={isEditingRef}
          activeObjectRef={activeObjectRef}
          syncShapeInStorage={syncShapeInStorage}
        />
      </section>
    </main>
  );
};

export default Editor;
